{
  "ProjectName": "mcp-ultra",
  "Timestamp": "2025-10-17 23:22:08",
  "Critical": [
    {
      "Type": "Erros não tratados",
      "Severity": "crítico",
      "Location": "múltiplos arquivos",
      "Description": "21 erro(s) não tratado(s)",
      "Suggestion": "Adicione verificação de erro: if err != nil { ... }",
      "Fixability": {
        "Safe": false,
        "RollbackEasy": true,
        "AffectsBehavior": true,
        "RequiresReview": true,
        "AutoFixCommand": "",
        "ManualSteps": "1. Para cada erro não tratado, decida:\n   a) Retornar o erro (wrap com context)\n   b) Logar e continuar\n   c) Logar e retornar\n2. Adicione if err != nil { } manualmente",
        "NonFixableReason": "BUSINESS_LOGIC"
      },
      "Examples": [
        "error: failed to check packages: errors while loading package github.com/vertikon/mcp-ultra/internal/handlers/http [github.com/vertikon/mcp-ultra/internal/handlers/http.test]: [-: # github.com/vertikon/mcp-ultra/internal/handlers/http [github.com/vertikon/mcp-ultra/internal/handlers/http.test]",
        "internal\\handlers\\http\\router_test.go:104:44: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter",
        "internal\\handlers\\http\\router_test.go:177:46: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter",
        "internal\\handlers\\http\\router_test.go:199:49: not enough arguments in call to NewRouter",
        "\thave (*zap.Logger, *MockHealthService, *MockTaskService)",
        "\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger)",
        "internal\\handlers\\http\\router_test.go:272:12: cannot use taskID (variable of type string) as uuid.UUID value in struct literal",
        "internal\\handlers\\http\\router_test.go:312:3: declared and not used: filters",
        "internal\\handlers\\http\\router_test.go:356:35: response.Tasks undefined (type domain.TaskList has no field or method Tasks)",
        "internal\\handlers\\http\\router_test.go:368:49: not enough arguments in call to NewRouter",
        "\thave (*zap.Logger, *MockHealthService, *MockTaskService)",
        "\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger)",
        "internal\\handlers\\http\\router_test.go:403:49: not enough arguments in call to NewRouter",
        "\thave (*zap.Logger, *MockHealthService, *MockTaskService)",
        "\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger) E:\\vertikon\\business\\SaaS\\templates\\mcp-ultra\\internal\\handlers\\http\\router_test.go:104:44: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter E:\\vertikon\\business\\SaaS\\templates\\mcp-ultra\\internal\\handlers\\http\\router_test.go:177:46: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter E:\\vertikon\\business\\SaaS\\templates\\mcp-ultra\\internal\\handlers\\http\\router_test.go:199:64: not enough arguments in call to NewRouter"
      ],
      "NonFixableReason": "BUSINESS_LOGIC"
    }
  ],
  "Medium": [],
  "Low": [
    {
      "Type": "Formatação (gofmt)",
      "Severity": "baixo",
      "Location": "múltiplos arquivos",
      "Description": "1 arquivo(s) mal formatado(s)",
      "Suggestion": "Execute: gofmt -w . ou gofumpt -w .",
      "Fixability": {
        "Safe": true,
        "RollbackEasy": true,
        "AffectsBehavior": false,
        "RequiresReview": false,
        "AutoFixCommand": "gofmt -w . \u0026\u0026 goimports -w .",
        "ManualSteps": "",
        "NonFixableReason": ""
      },
      "Examples": [
        "internal\\services\\task_service.go"
      ],
      "NonFixableReason": ""
    },
    {
      "Type": "Linter limpo",
      "Severity": "baixo",
      "Location": "múltiplos arquivos",
      "Description": "Linter encontrou problemas",
      "Suggestion": "Corrija os problemas manualmente (NÃO use --fix)",
      "Fixability": {
        "Safe": false,
        "RollbackEasy": false,
        "AffectsBehavior": true,
        "RequiresReview": true,
        "AutoFixCommand": "",
        "ManualSteps": "1. Analise cada issue do linter\n2. Corrija manualmente, entendendo o contexto\n3. NÃO use golangci-lint run --fix (pode quebrar código)\n4. Execute testes após cada correção",
        "NonFixableReason": "BUSINESS_LOGIC"
      },
      "Examples": [
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/internal/handlers/http [github.com/vertikon/mcp-ultra/internal/handlers/http.test]\\ninternal\\\\handlers\\\\http\\\\router_test.go:104:44: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter\\ninternal\\\\handlers\\\\http\\\\router_test.go:177:46: cannot use mockHealthService (variable of type *MockHealthService) as *HealthService value in argument to NewRouter\\ninternal\\\\handlers\\\\http\\\\router_test.go:199:49: not enough arguments in call to NewRouter\\n\\thave (*zap.Logger, *MockHealthService, *MockTaskService)\\n\\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger)\\ninternal\\\\handlers\\\\http\\\\router_test.go:272:12: cannot use taskID (variable of type string) as uuid.UUID value in struct literal\\ninternal\\\\handlers\\\\http\\\\router_test.go:312:3: declared and not used: filters\\ninternal\\\\handlers\\\\http\\\\router_test.go:356:35: response.Tasks undefined (type domain.TaskList has no field or method Tasks)\\ninternal\\\\handlers\\\\http\\\\router_test.go:368:49: not enough arguments in call to NewRouter\\n\\thave (*zap.Logger, *MockHealthService, *MockTaskService)\\n\\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger)\\ninternal\\\\handlers\\\\http\\\\router_test.go:403:49: not enough arguments in call to NewRouter\\n\\thave (*zap.Logger, *MockHealthService, *MockTaskService)\\n\\twant (TaskService, *features.FlagManager, *HealthService, *zap.Logger)\"",
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/internal/middleware [github.com/vertikon/mcp-ultra/internal/middleware.test]\\ninternal\\\\middleware\\\\auth_test.go:96:30: undefined: testhelpers.GetTestAPIKeys\"",
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/internal/services [github.com/vertikon/mcp-ultra/internal/services.test]\\ninternal\\\\services\\\\task_service_test.go:104:70: undefined: domain.UserFilter\\ninternal\\\\services\\\\task_service_test.go:171:28: cannot use taskRepo (variable of type *mockTaskRepository) as domain.TaskRepository value in argument to NewTaskService: *mockTaskRepository does not implement domain.TaskRepository (wrong type for method List)\\n\\t\\thave List(context.Context, domain.TaskFilter) ([]*domain.Task, error)\\n\\t\\twant List(context.Context, domain.TaskFilter) ([]*domain.Task, int, error)\\ninternal\\\\services\\\\task_service_test.go:171:48: cannot use eventRepo (variable of type *mockEventRepository) as domain.EventRepository value in argument to NewTaskService: *mockEventRepository does not implement domain.EventRepository (missing method GetByType)\\ninternal\\\\services\\\\task_service_test.go:171:59: cannot use cacheRepo (variable of type *mockCacheRepository) as domain.CacheRepository value in argument to NewTaskService: *mockCacheRepository does not implement domain.CacheRepository (missing method Exists)\\ninternal\\\\services\\\\task_service_test.go:199:31: declared and not used: eventRepo\"",
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/test/component [github.com/vertikon/mcp-ultra/test/component.test]\\ntest\\\\component\\\\task_service_test.go:39:3: cannot use suite.taskRepo (variable of type *mocks.MockTaskRepository) as domain.TaskRepository value in argument to services.NewTaskService: *mocks.MockTaskRepository does not implement domain.TaskRepository (wrong type for method Delete)\\n\\t\\thave Delete(context.Context, string) error\\n\\t\\twant Delete(context.Context, uuid.UUID) error\\ntest\\\\component\\\\task_service_test.go:40:3: cannot use suite.validator (variable of type *mocks.MockValidator) as domain.UserRepository value in argument to services.NewTaskService: *mocks.MockValidator does not implement domain.UserRepository (missing method Create)\\ntest\\\\component\\\\task_service_test.go:42:3: cannot use suite.cacheRepo (variable of type *mocks.MockCacheRepository) as domain.CacheRepository value in argument to services.NewTaskService: *mocks.MockCacheRepository does not implement domain.CacheRepository (wrong type for method Get)\\n\\t\\thave Get(context.Context, string) (interface{}, error)\\n\\t\\twant Get(context.Context, string) (string, error)\\ntest\\\\component\\\\task_service_test.go:44:3: cannot use suite.eventBus (variable of type *mocks.MockEventBus) as services.EventBus value in argument to services.NewTaskService: *mocks.MockEventBus does not implement services.EventBus (wrong type for method Publish)\\n\\t\\thave Publish(context.Context, string, []byte) error\\n\\t\\twant Publish(context.Context, *domain.Event) error\\ntest\\\\component\\\\task_service_test.go:65:3: unknown field Metadata in struct literal of type services.CreateTaskRequest\\ntest\\\\component\\\\task_service_test.go:78:20: req.Metadata undefined (type *services.CreateTaskRequest has no field or method Metadata)\\ntest\\\\component\\\\task_service_test.go:97:55: too many arguments in call to suite.service.CreateTask\\n\\thave (context.Context, uuid.UUID, *services.CreateTaskRequest)\\n\\twant (context.Context, services.CreateTaskRequest)\\ntest\\\\component\\\\task_service_test.go:118:29: undefined: services.ValidationError\\ntest\\\\component\\\\task_service_test.go:127:55: too many arguments in call to suite.service.CreateTask\\n\\thave (context.Context, uuid.UUID, *services.CreateTaskRequest)\\n\\twant (context.Context, services.CreateTaskRequest)\\ntest\\\\component\\\\task_service_test.go:151:52: too many arguments in call to suite.service.GetTask\\n\\thave (context.Context, uuid.UUID, uuid.UUID)\\n\\twant (context.Context, uuid.UUID)\\ntest\\\\component\\\\task_service_test.go:151:52: too many errors\"",
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/test/property [github.com/vertikon/mcp-ultra/test/property.test]\\ntest\\\\property\\\\task_properties_test.go:231:4: declared and not used: originalTitle\"",
        "internal\\observability\\middleware.go:189: 189-225 lines are duplicate of `internal\\observability\\middleware.go:228-264` (dupl)",
        "func (ts *TelemetryService) CacheOperation(",
        "\tctx context.Context,",
        "\toperation string,",
        "\tkey string,"
      ],
      "NonFixableReason": "BUSINESS_LOGIC"
    }
  ],
  "TotalGAPs": 3,
  "Score": 85,
  "AutoFixable": 1,
  "Manual": 2
}