{
  "ProjectName": "mcp-ultra",
  "Timestamp": "2025-10-18 00:54:02",
  "Critical": [
    {
      "Type": "Erros não tratados",
      "Severity": "crítico",
      "Location": "múltiplos arquivos",
      "Description": "38 erro(s) não tratado(s)",
      "Suggestion": "Adicione verificação de erro: if err != nil { ... }",
      "Fixability": {
        "Safe": false,
        "RollbackEasy": true,
        "AffectsBehavior": true,
        "RequiresReview": true,
        "AutoFixCommand": "",
        "ManualSteps": "1. Para cada erro não tratado, decida:\n   a) Retornar o erro (wrap com context)\n   b) Logar e continuar\n   c) Logar e retornar\n2. Adicione if err != nil { } manualmente",
        "NonFixableReason": "BUSINESS_LOGIC"
      },
      "Examples": [
        "error: failed to check packages: errors while loading package github.com/vertikon/mcp-ultra/test/component [github.com/vertikon/mcp-ultra/test/component.test]: [-: # github.com/vertikon/mcp-ultra/test/component [github.com/vertikon/mcp-ultra/test/component.test]",
        "test\\component\\task_service_test.go:91:8: suite.validator undefined (type *TaskServiceTestSuite has no field or method validator)",
        "test\\component\\task_service_test.go:120:2: declared and not used: userID",
        "test\\component\\task_service_test.go:127:2: declared and not used: validationErr",
        "test\\component\\task_service_test.go:133:47: cannot use req (variable of type *services.CreateTaskRequest) as services.CreateTaskRequest value in argument to suite.service.CreateTask",
        "test\\component\\task_service_test.go:157:52: too many arguments in call to suite.service.GetTask",
        "\thave (context.Context, uuid.UUID, uuid.UUID)",
        "\twant (context.Context, uuid.UUID)",
        "test\\component\\task_service_test.go:182:52: too many arguments in call to suite.service.GetTask",
        "\thave (context.Context, uuid.UUID, uuid.UUID)",
        "\twant (context.Context, uuid.UUID)",
        "test\\component\\task_service_test.go:200:52: too many arguments in call to suite.service.GetTask",
        "\thave (context.Context, uuid.UUID, uuid.UUID)",
        "\twant (context.Context, uuid.UUID)",
        "test\\component\\task_service_test.go:226:52: too many arguments in call to suite.service.GetTask"
      ],
      "NonFixableReason": "BUSINESS_LOGIC"
    },
    {
      "Type": "Nil Pointer Check",
      "Severity": "crítico",
      "Location": "múltiplos arquivos",
      "Description": "3 potencial(is) nil pointer issue(s)",
      "Suggestion": "Adicione nil checks antes de dereferenciar pointers",
      "Fixability": {
        "Safe": false,
        "RollbackEasy": false,
        "AffectsBehavior": true,
        "RequiresReview": true,
        "AutoFixCommand": "",
        "ManualSteps": "1. Para type assertions: value, ok := x.(Type)\n2. Sempre verifique if !ok antes de usar value\n3. Para pointer dereference: if ptr != nil { ptr.Field }\n4. Considere usar nilaway para análise estática",
        "NonFixableReason": "CONCURRENCY"
      },
      "Examples": [
        "mocks.go:26 type assertion sem verificação",
        "mocks.go:118 type assertion sem verificação",
        "mocks.go:126 type assertion sem verificação"
      ],
      "NonFixableReason": "CONCURRENCY"
    }
  ],
  "Medium": [],
  "Low": [
    {
      "Type": "Linter limpo",
      "Severity": "baixo",
      "Location": "múltiplos arquivos",
      "Description": "Linter encontrou problemas",
      "Suggestion": "Corrija os problemas manualmente (NÃO use --fix)",
      "Fixability": {
        "Safe": false,
        "RollbackEasy": false,
        "AffectsBehavior": true,
        "RequiresReview": true,
        "AutoFixCommand": "",
        "ManualSteps": "1. Analise cada issue do linter\n2. Corrija manualmente, entendendo o contexto\n3. NÃO use golangci-lint run --fix (pode quebrar código)\n4. Execute testes após cada correção",
        "NonFixableReason": "BUSINESS_LOGIC"
      },
      "Examples": [
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/test/component [github.com/vertikon/mcp-ultra/test/component.test]\\ntest\\\\component\\\\task_service_test.go:91:8: suite.validator undefined (type *TaskServiceTestSuite has no field or method validator)\\ntest\\\\component\\\\task_service_test.go:120:2: declared and not used: userID\\ntest\\\\component\\\\task_service_test.go:127:2: declared and not used: validationErr\\ntest\\\\component\\\\task_service_test.go:133:47: cannot use req (variable of type *services.CreateTaskRequest) as services.CreateTaskRequest value in argument to suite.service.CreateTask\\ntest\\\\component\\\\task_service_test.go:157:52: too many arguments in call to suite.service.GetTask\\n\\thave (context.Context, uuid.UUID, uuid.UUID)\\n\\twant (context.Context, uuid.UUID)\\ntest\\\\component\\\\task_service_test.go:182:52: too many arguments in call to suite.service.GetTask\\n\\thave (context.Context, uuid.UUID, uuid.UUID)\\n\\twant (context.Context, uuid.UUID)\\ntest\\\\component\\\\task_service_test.go:200:52: too many arguments in call to suite.service.GetTask\\n\\thave (context.Context, uuid.UUID, uuid.UUID)\\n\\twant (context.Context, uuid.UUID)\\ntest\\\\component\\\\task_service_test.go:226:52: too many arguments in call to suite.service.GetTask\\n\\thave (context.Context, uuid.UUID, uuid.UUID)\\n\\twant (context.Context, uuid.UUID)\\ntest\\\\component\\\\task_service_test.go:231:35: undefined: services.ErrAccessDenied\\ntest\\\\component\\\\task_service_test.go:248:16: cannot use \\\"New Title\\\" (untyped string constant) as *string value in struct literal\\ntest\\\\component\\\\task_service_test.go:248:16: too many errors\"",
        "level=error msg=\"[linters_context] typechecking error: : # github.com/vertikon/mcp-ultra/test/property [github.com/vertikon/mcp-ultra/test/property.test]\\ntest\\\\property\\\\task_properties_test.go:231:4: declared and not used: originalTitle\"",
        "internal\\observability\\middleware.go:189: 189-225 lines are duplicate of `internal\\observability\\middleware.go:228-264` (dupl)",
        "func (ts *TelemetryService) CacheOperation(",
        "\tctx context.Context,",
        "\toperation string,",
        "\tkey string,",
        "\tfn func(context.Context) error,",
        ") error {",
        "\tif !ts.config.Enabled {"
      ],
      "NonFixableReason": "BUSINESS_LOGIC"
    }
  ],
  "TotalGAPs": 3,
  "Score": 85,
  "AutoFixable": 0,
  "Manual": 3
}