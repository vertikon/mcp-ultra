# OpenTelemetry Collector deployment for MCP Ultra
# Collects, processes, and exports telemetry data (traces, metrics, logs)

apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/component: configuration
data:
  otel-collector-config.yaml: |
    receivers:
      # OTLP receiver for traces and metrics
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Prometheus receiver for scraping metrics
      prometheus:
        config:
          scrape_configs:
            - job_name: 'mcp-ultra'
              scrape_interval: 15s
              static_configs:
                - targets: ['mcp-ultra-service:9090']
              metrics_path: /metrics
    
    processors:
      # Batch processor for performance
      batch:
        timeout: 1s
        send_batch_max_size: 1024
        send_batch_size: 512
      
      # Memory limiter to prevent OOM
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Resource processor to add service information
      resource:
        attributes:
          - key: service.namespace
            value: mcp-ultra
            action: upsert
          - key: deployment.environment
            value: ${ENVIRONMENT}
            action: upsert
      
      # Span processor for sampling and filtering
      probabilistic_sampler:
        hash_seed: 22
        sampling_percentage: 10
    
    exporters:
      # OTLP exporter to external systems (Jaeger, etc.)
      otlp:
        endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT}
        headers:
          authorization: "Bearer ${OTEL_API_TOKEN}"
      
      # Prometheus exporter for metrics
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: mcp_ultra
        const_labels:
          environment: ${ENVIRONMENT}
      
      # Jaeger exporter (legacy support)
      jaeger:
        endpoint: ${JAEGER_ENDPOINT}
        tls:
          insecure: false
      
      # Logging exporter for debugging
      logging:
        loglevel: info
        sampling_initial: 5
        sampling_thereafter: 200
    
    extensions:
      # Health check extension
      health_check:
        endpoint: 0.0.0.0:13133
      
      # PPROFiling extension for performance monitoring
      pprof:
        endpoint: 0.0.0.0:1777
      
      # zPages extension for debugging
      zpages:
        endpoint: 0.0.0.0:55679
    
    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        # Traces pipeline
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch, probabilistic_sampler]
          exporters: [otlp, jaeger, logging]
        
        # Metrics pipeline
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus, otlp, logging]
        
        # Logs pipeline (if needed)
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [logging]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "0.91.0"
    app.kubernetes.io/component: telemetry
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: otel-collector
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "0.91.0"
        app.kubernetes.io/component: telemetry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8889"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.91.0
        imagePullPolicy: IfNotPresent
        command:
        - "/otelcol-contrib"
        - "--config=/etc/otelcol-contrib/otel-collector-config.yaml"
        
        ports:
        - name: otlp-grpc
          containerPort: 4317
          protocol: TCP
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
        - name: prometheus
          containerPort: 8889
          protocol: TCP
        - name: health
          containerPort: 13133
          protocol: TCP
        - name: pprof
          containerPort: 1777
          protocol: TCP
        - name: zpages
          containerPort: 55679
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "https://api.honeycomb.io:443"
        - name: OTEL_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: mcp-ultra-secrets
              key: otel-api-token
        - name: JAEGER_ENDPOINT
          value: "jaeger-collector:14250"
        
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /etc/otelcol-contrib
        - name: tmp
          mountPath: /tmp

      volumes:
      - name: otel-collector-config-vol
        configMap:
          name: otel-collector-config
          items:
          - key: otel-collector-config.yaml
            path: otel-collector-config.yaml
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/component: telemetry
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: production
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: 4318
    protocol: TCP
  - name: prometheus
    port: 8889
    targetPort: 8889
    protocol: TCP
  - name: health
    port: 13133
    targetPort: 13133
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector-headless
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/component: telemetry
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: production
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: 4318
    protocol: TCP

---
# ServiceMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: otel-collector
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: otel-collector
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
  endpoints:
  - port: prometheus
    interval: 30s
    path: /metrics
    honorLabels: true