apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-ultra-service-account
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: service-account
  annotations:
    # For Vault Kubernetes Auth
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "mcp-ultra"
    vault.hashicorp.com/agent-inject-secret-database: "database/creds/mcp-ultra"
    vault.hashicorp.com/agent-inject-template-database: |
      {{- with secret "database/creds/mcp-ultra" -}}
      POSTGRES_USER="{{ .Data.username }}"
      POSTGRES_PASSWORD="{{ .Data.password }}"
      {{- end }}
automountServiceAccountToken: true
imagePullSecrets:
- name: registry-credentials
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mcp-ultra-role
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: rbac
rules:
# ConfigMap and Secret access for configuration
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
  resourceNames: 
  - "mcp-ultra-config"
  - "mcp-ultra-secrets" 
  - "database-credentials"
  - "external-api-secrets"

# Pod access for health checks and debugging
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

# Service access for service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

# Events for debugging and monitoring
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

# Lease access for leader election (if using)
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "create", "update", "patch", "delete"]
  resourceNames: ["mcp-ultra-leader"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mcp-ultra-role-binding
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: mcp-ultra-service-account
  namespace: mcp-ultra
roleRef:
  kind: Role
  name: mcp-ultra-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for cross-namespace access (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-ultra-cluster-role
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: rbac
rules:
# Node access for node-level metrics and debugging
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]

# Custom Resource Definitions (if using operators)
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]

# Prometheus ServiceMonitor access
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "podmonitors"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Vault Auth
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-ultra-cluster-role-binding
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: mcp-ultra-service-account
  namespace: mcp-ultra
roleRef:
  kind: ClusterRole
  name: mcp-ultra-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Monitoring Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-ultra-monitoring
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-ultra-monitoring
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-ultra-monitoring
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mcp-ultra-monitoring
subjects:
- kind: ServiceAccount
  name: mcp-ultra-monitoring
  namespace: mcp-ultra
---
# Pod Security Policy (if PSP is enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: mcp-ultra-psp
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  allowedCapabilities: []
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mcp-ultra-psp
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: security
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames: ['mcp-ultra-psp']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mcp-ultra-psp
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: security
roleRef:
  kind: Role
  name: mcp-ultra-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: mcp-ultra-service-account
  namespace: mcp-ultra