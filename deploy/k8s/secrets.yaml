apiVersion: v1
kind: Secret
metadata:
  name: mcp-ultra-secrets
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # These should be base64 encoded values
  # In production, use external secret management like HashiCorp Vault
  postgres-password: cG9zdGdyZXM=  # postgres
  redis-password: ""  # empty for development
  jwt-secret: bXktand0LXNlY3JldC1rZXk=  # my-jwt-secret-key
  vault-token: ""  # populated by Vault Agent
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # In production, these would be real TLS certificates
  # Use cert-manager for automatic certificate management
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...  # Base64 encoded private key
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS52ZXJ0aWtvbi5jb20iOnsidXNlcm5hbWUiOiJ2ZXJ0aWtvbi11c2VyIiwicGFzc3dvcmQiOiJ2ZXJ0aWtvbi1wYXNzIiwiZW1haWwiOiJkZXZAdmVydGlrb24uY29tIiwiYXV0aCI6ImRtVnlkR2xyYjI0dGRYTmxjanAyWlhKMGFXdHZiaTF3WVhOeiJ9fX0=
---
# Service Account Token Secret (for Vault Kubernetes Auth)
apiVersion: v1
kind: Secret
metadata:
  name: vault-service-account-token
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: vault-auth
  annotations:
    kubernetes.io/service-account.name: mcp-ultra-service-account
type: kubernetes.io/service-account-token
---
# Database connection secret with full connection strings
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: database
type: Opaque
stringData:
  postgres-dsn: "postgres://postgres:postgres@postgresql-service:5432/mcp_ultra?sslmode=require"
  redis-url: "redis://redis-service:6379/0"
  nats-url: "nats://nats-service:4222"
---
# External API secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-api-secrets
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: external-apis
type: Opaque
stringData:
  vault-addr: "https://vault.vertikon.com"
  vault-role: "mcp-ultra"
  opa-url: "http://opa-service:8181"
  jwt-jwks-url: "https://auth.vertikon.com/.well-known/jwks.json"
  jwt-issuer: "https://auth.vertikon.com"
  jwt-audience: "mcp-ultra-api"
  
  # Observability
  jaeger-endpoint: "http://jaeger-collector:14268/api/traces"
  prometheus-url: "http://prometheus:9090"
  grafana-url: "http://grafana:3000"
  
  # Monitoring and alerting
  slack-webhook-url: ""
  pagerduty-integration-key: ""
  alert-manager-url: "http://alertmanager:9093"