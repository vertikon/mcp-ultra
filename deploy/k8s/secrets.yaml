apiVersion: v1
kind: Secret
metadata:
  name: mcp-ultra-secrets
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # These should be base64 encoded values
  # In production, use external secret management like HashiCorp Vault
  # ⚠️ SECURITY: Replace all CHANGE_ME values before deployment
  postgres-password: "CHANGE_ME_SET_VIA_ENVIRONMENT_VARIABLE"
  redis-password: "CHANGE_ME_GENERATE_SECURE_PASSWORD"
  jwt-secret: "CHANGE_ME_RUN_GENERATE_SECRETS_SCRIPT"
  vault-token: "CHANGE_ME_POPULATED_BY_VAULT_AGENT"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # In production, these would be real TLS certificates
  # Use cert-manager for automatic certificate management
  # ⚠️ SECURITY: Replace with real certificates before deployment
  tls.crt: "CHANGE_ME_USE_CERT_MANAGER_OR_REAL_CERTIFICATE"
  tls.key: "CHANGE_ME_USE_CERT_MANAGER_OR_REAL_PRIVATE_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "CHANGE_ME_SET_REGISTRY_CREDENTIALS_VIA_EXTERNAL_SECRET_MANAGEMENT"
---
# Service Account Token Secret (for Vault Kubernetes Auth)
apiVersion: v1
kind: Secret
metadata:
  name: vault-service-account-token
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: vault-auth
  annotations:
    kubernetes.io/service-account.name: mcp-ultra-service-account
type: kubernetes.io/service-account-token
---
# Database connection secret with full connection strings
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: database
type: Opaque
stringData:
  postgres-dsn: "postgres://postgres:${POSTGRES_PASSWORD}@postgresql-service:5432/mcp_ultra?sslmode=require"
  redis-url: "redis://redis-service:6379/0"
  nats-url: "nats://nats-service:4222"
---
# External API secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-api-secrets
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/component: external-apis
type: Opaque
stringData:
  vault-addr: "${VAULT_ADDR}"
  vault-role: "${VAULT_ROLE:-mcp-ultra}"
  opa-url: "${OPA_URL:-http://opa-service:8181}"
  jwt-jwks-url: "${JWT_JWKS_URL}"
  jwt-issuer: "${JWT_ISSUER}"
  jwt-audience: "${JWT_AUDIENCE:-mcp-ultra-api}"
  
  # Observability
  jaeger-endpoint: "${JAEGER_ENDPOINT:-http://jaeger-collector:14268/api/traces}"
  prometheus-url: "${PROMETHEUS_URL:-http://prometheus:9090}"
  grafana-url: "${GRAFANA_URL:-http://grafana:3000}"

  # Monitoring and alerting
  slack-webhook-url: "${SLACK_WEBHOOK_URL}"
  pagerduty-integration-key: "${PAGERDUTY_INTEGRATION_KEY}"
  alert-manager-url: "${ALERTMANAGER_URL:-http://alertmanager:9093}"