apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-ultra-deployment
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "21.0.0"
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: mcp-ultra-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "MCP Ultra v21 main application deployment"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: mcp-ultra
      app.kubernetes.io/instance: production
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mcp-ultra
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "21.0.0"
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: mcp-ultra-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "mcp-ultra"
        config.linkerd.io/proxy-cpu-request: "10m"
        config.linkerd.io/proxy-memory-request: "64Mi"
    spec:
      serviceAccountName: mcp-ultra-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      imagePullSecrets:
      - name: registry-credentials
      
      initContainers:
      - name: migration-init
        image: vertikon/mcp-ultra:21.0.0
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Running database migrations..."
          /app/mcp-ultra migrate up
          echo "Migrations completed"
        env:
        - name: CONFIG_FILE
          value: "/etc/config/config.yaml"
        - name: POSTGRES_HOST
          value: "postgresql-service"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "mcp_ultra"
        - name: POSTGRES_SSLMODE
          value: "require"
        envFrom:
        - secretRef:
            name: database-credentials
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

      containers:
      - name: mcp-ultra
        image: vertikon/mcp-ultra:21.0.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 9655
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        env:
        - name: CONFIG_FILE
          value: "/etc/config/config.yaml"
        - name: LOG_CONFIG
          value: "/etc/config/log-config.yaml"
        - name: ENVIRONMENT
          value: "production"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Database Configuration
        - name: POSTGRES_HOST
          value: "postgresql-service"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "mcp_ultra"
        - name: POSTGRES_SSLMODE
          value: "require"
        
        # Redis Configuration
        - name: REDIS_ADDR
          value: "redis-service:6379"
        - name: REDIS_DB
          value: "0"
        
        # NATS Configuration
        - name: NATS_URL
          value: "nats://nats-service:4222"
        
        # Performance Configuration
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        
        envFrom:
        - secretRef:
            name: external-api-secrets
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /var/cache/app

      volumes:
      - name: config-volume
        configMap:
          name: mcp-ultra-config
          defaultMode: 420
      - name: tls-certs
        secret:
          secretName: tls-secret
          defaultMode: 420
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: cache-volume
        emptyDir:
          sizeLimit: 500Mi

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mcp-ultra
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mcp-ultra
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-ultra-service
  namespace: mcp-ultra
  labels:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: mcp-ultra
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: application
  ports:
  - name: http
    port: 80
    targetPort: 9655
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  sessionAffinity: None
